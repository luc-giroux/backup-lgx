'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class AdjustmentsDataset
    Inherits DataSet
    
    Private tableAdjustments As AdjustmentsDataTable
    
    Private tableCalendar As CalendarDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Adjustments")) Is Nothing) Then
                Me.Tables.Add(New AdjustmentsDataTable(ds.Tables("Adjustments")))
            End If
            If (Not (ds.Tables("Calendar")) Is Nothing) Then
                Me.Tables.Add(New CalendarDataTable(ds.Tables("Calendar")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adjustments As AdjustmentsDataTable
        Get
            Return Me.tableAdjustments
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Calendar As CalendarDataTable
        Get
            Return Me.tableCalendar
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As AdjustmentsDataset = CType(MyBase.Clone,AdjustmentsDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Adjustments")) Is Nothing) Then
            Me.Tables.Add(New AdjustmentsDataTable(ds.Tables("Adjustments")))
        End If
        If (Not (ds.Tables("Calendar")) Is Nothing) Then
            Me.Tables.Add(New CalendarDataTable(ds.Tables("Calendar")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAdjustments = CType(Me.Tables("Adjustments"),AdjustmentsDataTable)
        If (Not (Me.tableAdjustments) Is Nothing) Then
            Me.tableAdjustments.InitVars
        End If
        Me.tableCalendar = CType(Me.Tables("Calendar"),CalendarDataTable)
        If (Not (Me.tableCalendar) Is Nothing) Then
            Me.tableCalendar.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "AdjustmentsDataset"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/AdjustmentsDataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-AU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAdjustments = New AdjustmentsDataTable
        Me.Tables.Add(Me.tableAdjustments)
        Me.tableCalendar = New CalendarDataTable
        Me.Tables.Add(Me.tableCalendar)
    End Sub
    
    Private Function ShouldSerializeAdjustments() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCalendar() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AdjustmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As AdjustmentsRowChangeEvent)
    
    Public Delegate Sub CalendarRowChangeEventHandler(ByVal sender As Object, ByVal e As CalendarRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEntryID As DataColumn
        
        Private columnCompanyID As DataColumn
        
        Private columnEmployeeID As DataColumn
        
        Private columnPostedDate As DataColumn
        
        Private columnWorkPackageID As DataColumn
        
        Private columnRatePayCurrencyID As DataColumn
        
        Private columnRatePayLocation As DataColumn
        
        Private columnRateAssignCurrencyID As DataColumn
        
        Private columnRateAssignLocation As DataColumn
        
        Private columnLabourCost As DataColumn
        
        Private columnOtherOfficeSpace As DataColumn
        
        Private columnOtherOfficeExpenses As DataColumn
        
        Private columnOtherIT As DataColumn
        
        Private columnOtherITCore As DataColumn
        
        Private columnAdjustment As DataColumn
        
        Private columnAdjustmentShortComment As DataColumn
        
        Private columnAdjustmentLongComment As DataColumn
        
        Private columnAdjustmentDate As DataColumn
        
        Private columnAdjustmentUser As DataColumn
        
        Private columnWorkedDate As DataColumn
        
        Friend Sub New()
            MyBase.New("Adjustments")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property EntryIDColumn As DataColumn
            Get
                Return Me.columnEntryID
            End Get
        End Property
        
        Friend ReadOnly Property CompanyIDColumn As DataColumn
            Get
                Return Me.columnCompanyID
            End Get
        End Property
        
        Friend ReadOnly Property EmployeeIDColumn As DataColumn
            Get
                Return Me.columnEmployeeID
            End Get
        End Property
        
        Friend ReadOnly Property PostedDateColumn As DataColumn
            Get
                Return Me.columnPostedDate
            End Get
        End Property
        
        Friend ReadOnly Property WorkPackageIDColumn As DataColumn
            Get
                Return Me.columnWorkPackageID
            End Get
        End Property
        
        Friend ReadOnly Property RatePayCurrencyIDColumn As DataColumn
            Get
                Return Me.columnRatePayCurrencyID
            End Get
        End Property
        
        Friend ReadOnly Property RatePayLocationColumn As DataColumn
            Get
                Return Me.columnRatePayLocation
            End Get
        End Property
        
        Friend ReadOnly Property RateAssignCurrencyIDColumn As DataColumn
            Get
                Return Me.columnRateAssignCurrencyID
            End Get
        End Property
        
        Friend ReadOnly Property RateAssignLocationColumn As DataColumn
            Get
                Return Me.columnRateAssignLocation
            End Get
        End Property
        
        Friend ReadOnly Property LabourCostColumn As DataColumn
            Get
                Return Me.columnLabourCost
            End Get
        End Property
        
        Friend ReadOnly Property OtherOfficeSpaceColumn As DataColumn
            Get
                Return Me.columnOtherOfficeSpace
            End Get
        End Property
        
        Friend ReadOnly Property OtherOfficeExpensesColumn As DataColumn
            Get
                Return Me.columnOtherOfficeExpenses
            End Get
        End Property
        
        Friend ReadOnly Property OtherITColumn As DataColumn
            Get
                Return Me.columnOtherIT
            End Get
        End Property
        
        Friend ReadOnly Property OtherITCoreColumn As DataColumn
            Get
                Return Me.columnOtherITCore
            End Get
        End Property
        
        Friend ReadOnly Property AdjustmentColumn As DataColumn
            Get
                Return Me.columnAdjustment
            End Get
        End Property
        
        Friend ReadOnly Property AdjustmentShortCommentColumn As DataColumn
            Get
                Return Me.columnAdjustmentShortComment
            End Get
        End Property
        
        Friend ReadOnly Property AdjustmentLongCommentColumn As DataColumn
            Get
                Return Me.columnAdjustmentLongComment
            End Get
        End Property
        
        Friend ReadOnly Property AdjustmentDateColumn As DataColumn
            Get
                Return Me.columnAdjustmentDate
            End Get
        End Property
        
        Friend ReadOnly Property AdjustmentUserColumn As DataColumn
            Get
                Return Me.columnAdjustmentUser
            End Get
        End Property
        
        Friend ReadOnly Property WorkedDateColumn As DataColumn
            Get
                Return Me.columnWorkedDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdjustmentsRow
            Get
                Return CType(Me.Rows(index),AdjustmentsRow)
            End Get
        End Property
        
        Public Event AdjustmentsRowChanged As AdjustmentsRowChangeEventHandler
        
        Public Event AdjustmentsRowChanging As AdjustmentsRowChangeEventHandler
        
        Public Event AdjustmentsRowDeleted As AdjustmentsRowChangeEventHandler
        
        Public Event AdjustmentsRowDeleting As AdjustmentsRowChangeEventHandler
        
        Public Overloads Sub AddAdjustmentsRow(ByVal row As AdjustmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdjustmentsRow( _
                    ByVal EntryID As Integer,  _
                    ByVal CompanyID As String,  _
                    ByVal EmployeeID As Integer,  _
                    ByVal PostedDate As Date,  _
                    ByVal WorkPackageID As Integer,  _
                    ByVal RatePayCurrencyID As String,  _
                    ByVal RatePayLocation As String,  _
                    ByVal RateAssignCurrencyID As String,  _
                    ByVal RateAssignLocation As String,  _
                    ByVal LabourCost As Decimal,  _
                    ByVal OtherOfficeSpace As Decimal,  _
                    ByVal OtherOfficeExpenses As Decimal,  _
                    ByVal OtherIT As Decimal,  _
                    ByVal OtherITCore As Decimal,  _
                    ByVal Adjustment As String,  _
                    ByVal AdjustmentShortComment As String,  _
                    ByVal AdjustmentLongComment As String,  _
                    ByVal AdjustmentDate As Date,  _
                    ByVal AdjustmentUser As String,  _
                    ByVal WorkedDate As Date) As AdjustmentsRow
            Dim rowAdjustmentsRow As AdjustmentsRow = CType(Me.NewRow,AdjustmentsRow)
            rowAdjustmentsRow.ItemArray = New Object() {EntryID, CompanyID, EmployeeID, PostedDate, WorkPackageID, RatePayCurrencyID, RatePayLocation, RateAssignCurrencyID, RateAssignLocation, LabourCost, OtherOfficeSpace, OtherOfficeExpenses, OtherIT, OtherITCore, Adjustment, AdjustmentShortComment, AdjustmentLongComment, AdjustmentDate, AdjustmentUser, WorkedDate}
            Me.Rows.Add(rowAdjustmentsRow)
            Return rowAdjustmentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdjustmentsDataTable = CType(MyBase.Clone,AdjustmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdjustmentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEntryID = Me.Columns("EntryID")
            Me.columnCompanyID = Me.Columns("CompanyID")
            Me.columnEmployeeID = Me.Columns("EmployeeID")
            Me.columnPostedDate = Me.Columns("PostedDate")
            Me.columnWorkPackageID = Me.Columns("WorkPackageID")
            Me.columnRatePayCurrencyID = Me.Columns("RatePayCurrencyID")
            Me.columnRatePayLocation = Me.Columns("RatePayLocation")
            Me.columnRateAssignCurrencyID = Me.Columns("RateAssignCurrencyID")
            Me.columnRateAssignLocation = Me.Columns("RateAssignLocation")
            Me.columnLabourCost = Me.Columns("LabourCost")
            Me.columnOtherOfficeSpace = Me.Columns("OtherOfficeSpace")
            Me.columnOtherOfficeExpenses = Me.Columns("OtherOfficeExpenses")
            Me.columnOtherIT = Me.Columns("OtherIT")
            Me.columnOtherITCore = Me.Columns("OtherITCore")
            Me.columnAdjustment = Me.Columns("Adjustment")
            Me.columnAdjustmentShortComment = Me.Columns("AdjustmentShortComment")
            Me.columnAdjustmentLongComment = Me.Columns("AdjustmentLongComment")
            Me.columnAdjustmentDate = Me.Columns("AdjustmentDate")
            Me.columnAdjustmentUser = Me.Columns("AdjustmentUser")
            Me.columnWorkedDate = Me.Columns("WorkedDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnEntryID = New DataColumn("EntryID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntryID)
            Me.columnCompanyID = New DataColumn("CompanyID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompanyID)
            Me.columnEmployeeID = New DataColumn("EmployeeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmployeeID)
            Me.columnPostedDate = New DataColumn("PostedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostedDate)
            Me.columnWorkPackageID = New DataColumn("WorkPackageID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWorkPackageID)
            Me.columnRatePayCurrencyID = New DataColumn("RatePayCurrencyID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRatePayCurrencyID)
            Me.columnRatePayLocation = New DataColumn("RatePayLocation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRatePayLocation)
            Me.columnRateAssignCurrencyID = New DataColumn("RateAssignCurrencyID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRateAssignCurrencyID)
            Me.columnRateAssignLocation = New DataColumn("RateAssignLocation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRateAssignLocation)
            Me.columnLabourCost = New DataColumn("LabourCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLabourCost)
            Me.columnOtherOfficeSpace = New DataColumn("OtherOfficeSpace", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherOfficeSpace)
            Me.columnOtherOfficeExpenses = New DataColumn("OtherOfficeExpenses", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherOfficeExpenses)
            Me.columnOtherIT = New DataColumn("OtherIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherIT)
            Me.columnOtherITCore = New DataColumn("OtherITCore", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherITCore)
            Me.columnAdjustment = New DataColumn("Adjustment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdjustment)
            Me.columnAdjustmentShortComment = New DataColumn("AdjustmentShortComment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdjustmentShortComment)
            Me.columnAdjustmentLongComment = New DataColumn("AdjustmentLongComment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdjustmentLongComment)
            Me.columnAdjustmentDate = New DataColumn("AdjustmentDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdjustmentDate)
            Me.columnAdjustmentUser = New DataColumn("AdjustmentUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdjustmentUser)
            Me.columnWorkedDate = New DataColumn("WorkedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWorkedDate)
            Me.columnEntryID.ReadOnly = true
        End Sub
        
        Public Function NewAdjustmentsRow() As AdjustmentsRow
            Return CType(Me.NewRow,AdjustmentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdjustmentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdjustmentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdjustmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent AdjustmentsRowChanged(Me, New AdjustmentsRowChangeEvent(CType(e.Row,AdjustmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdjustmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent AdjustmentsRowChanging(Me, New AdjustmentsRowChangeEvent(CType(e.Row,AdjustmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdjustmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdjustmentsRowDeleted(Me, New AdjustmentsRowChangeEvent(CType(e.Row,AdjustmentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdjustmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdjustmentsRowDeleting(Me, New AdjustmentsRowChangeEvent(CType(e.Row,AdjustmentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdjustmentsRow(ByVal row As AdjustmentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentsRow
        Inherits DataRow
        
        Private tableAdjustments As AdjustmentsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdjustments = CType(Me.Table,AdjustmentsDataTable)
        End Sub
        
        Public Property EntryID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.EntryIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.EntryIDColumn) = value
            End Set
        End Property
        
        Public Property CompanyID As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.CompanyIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.CompanyIDColumn) = value
            End Set
        End Property
        
        Public Property EmployeeID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.EmployeeIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.EmployeeIDColumn) = value
            End Set
        End Property
        
        Public Property PostedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.PostedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.PostedDateColumn) = value
            End Set
        End Property
        
        Public Property WorkPackageID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.WorkPackageIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.WorkPackageIDColumn) = value
            End Set
        End Property
        
        Public Property RatePayCurrencyID As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.RatePayCurrencyIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.RatePayCurrencyIDColumn) = value
            End Set
        End Property
        
        Public Property RatePayLocation As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.RatePayLocationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.RatePayLocationColumn) = value
            End Set
        End Property
        
        Public Property RateAssignCurrencyID As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.RateAssignCurrencyIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.RateAssignCurrencyIDColumn) = value
            End Set
        End Property
        
        Public Property RateAssignLocation As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.RateAssignLocationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.RateAssignLocationColumn) = value
            End Set
        End Property
        
        Public Property LabourCost As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.LabourCostColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.LabourCostColumn) = value
            End Set
        End Property
        
        Public Property OtherOfficeSpace As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.OtherOfficeSpaceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.OtherOfficeSpaceColumn) = value
            End Set
        End Property
        
        Public Property OtherOfficeExpenses As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.OtherOfficeExpensesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.OtherOfficeExpensesColumn) = value
            End Set
        End Property
        
        Public Property OtherIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.OtherITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.OtherITColumn) = value
            End Set
        End Property
        
        Public Property OtherITCore As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.OtherITCoreColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.OtherITCoreColumn) = value
            End Set
        End Property
        
        Public Property Adjustment As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.AdjustmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.AdjustmentColumn) = value
            End Set
        End Property
        
        Public Property AdjustmentShortComment As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.AdjustmentShortCommentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.AdjustmentShortCommentColumn) = value
            End Set
        End Property
        
        Public Property AdjustmentLongComment As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.AdjustmentLongCommentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.AdjustmentLongCommentColumn) = value
            End Set
        End Property
        
        Public Property AdjustmentDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.AdjustmentDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.AdjustmentDateColumn) = value
            End Set
        End Property
        
        Public Property AdjustmentUser As String
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.AdjustmentUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.AdjustmentUserColumn) = value
            End Set
        End Property
        
        Public Property WorkedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdjustments.WorkedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdjustments.WorkedDateColumn) = value
            End Set
        End Property
        
        Public Function IsEntryIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.EntryIDColumn)
        End Function
        
        Public Sub SetEntryIDNull()
            Me(Me.tableAdjustments.EntryIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.CompanyIDColumn)
        End Function
        
        Public Sub SetCompanyIDNull()
            Me(Me.tableAdjustments.CompanyIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmployeeIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.EmployeeIDColumn)
        End Function
        
        Public Sub SetEmployeeIDNull()
            Me(Me.tableAdjustments.EmployeeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPostedDateNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.PostedDateColumn)
        End Function
        
        Public Sub SetPostedDateNull()
            Me(Me.tableAdjustments.PostedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWorkPackageIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.WorkPackageIDColumn)
        End Function
        
        Public Sub SetWorkPackageIDNull()
            Me(Me.tableAdjustments.WorkPackageIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRatePayCurrencyIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.RatePayCurrencyIDColumn)
        End Function
        
        Public Sub SetRatePayCurrencyIDNull()
            Me(Me.tableAdjustments.RatePayCurrencyIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRatePayLocationNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.RatePayLocationColumn)
        End Function
        
        Public Sub SetRatePayLocationNull()
            Me(Me.tableAdjustments.RatePayLocationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRateAssignCurrencyIDNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.RateAssignCurrencyIDColumn)
        End Function
        
        Public Sub SetRateAssignCurrencyIDNull()
            Me(Me.tableAdjustments.RateAssignCurrencyIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRateAssignLocationNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.RateAssignLocationColumn)
        End Function
        
        Public Sub SetRateAssignLocationNull()
            Me(Me.tableAdjustments.RateAssignLocationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLabourCostNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.LabourCostColumn)
        End Function
        
        Public Sub SetLabourCostNull()
            Me(Me.tableAdjustments.LabourCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherOfficeSpaceNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.OtherOfficeSpaceColumn)
        End Function
        
        Public Sub SetOtherOfficeSpaceNull()
            Me(Me.tableAdjustments.OtherOfficeSpaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherOfficeExpensesNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.OtherOfficeExpensesColumn)
        End Function
        
        Public Sub SetOtherOfficeExpensesNull()
            Me(Me.tableAdjustments.OtherOfficeExpensesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherITNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.OtherITColumn)
        End Function
        
        Public Sub SetOtherITNull()
            Me(Me.tableAdjustments.OtherITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherITCoreNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.OtherITCoreColumn)
        End Function
        
        Public Sub SetOtherITCoreNull()
            Me(Me.tableAdjustments.OtherITCoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdjustmentNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.AdjustmentColumn)
        End Function
        
        Public Sub SetAdjustmentNull()
            Me(Me.tableAdjustments.AdjustmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdjustmentShortCommentNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.AdjustmentShortCommentColumn)
        End Function
        
        Public Sub SetAdjustmentShortCommentNull()
            Me(Me.tableAdjustments.AdjustmentShortCommentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdjustmentLongCommentNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.AdjustmentLongCommentColumn)
        End Function
        
        Public Sub SetAdjustmentLongCommentNull()
            Me(Me.tableAdjustments.AdjustmentLongCommentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdjustmentDateNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.AdjustmentDateColumn)
        End Function
        
        Public Sub SetAdjustmentDateNull()
            Me(Me.tableAdjustments.AdjustmentDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdjustmentUserNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.AdjustmentUserColumn)
        End Function
        
        Public Sub SetAdjustmentUserNull()
            Me(Me.tableAdjustments.AdjustmentUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWorkedDateNull() As Boolean
            Return Me.IsNull(Me.tableAdjustments.WorkedDateColumn)
        End Function
        
        Public Sub SetWorkedDateNull()
            Me(Me.tableAdjustments.WorkedDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdjustmentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdjustmentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdjustmentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdjustmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CalendarDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWeekEndingDate As DataColumn
        
        Private columnWeekEndingDateToDisplay As DataColumn
        
        Friend Sub New()
            MyBase.New("Calendar")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property WeekEndingDateColumn As DataColumn
            Get
                Return Me.columnWeekEndingDate
            End Get
        End Property
        
        Friend ReadOnly Property WeekEndingDateToDisplayColumn As DataColumn
            Get
                Return Me.columnWeekEndingDateToDisplay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CalendarRow
            Get
                Return CType(Me.Rows(index),CalendarRow)
            End Get
        End Property
        
        Public Event CalendarRowChanged As CalendarRowChangeEventHandler
        
        Public Event CalendarRowChanging As CalendarRowChangeEventHandler
        
        Public Event CalendarRowDeleted As CalendarRowChangeEventHandler
        
        Public Event CalendarRowDeleting As CalendarRowChangeEventHandler
        
        Public Overloads Sub AddCalendarRow(ByVal row As CalendarRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCalendarRow(ByVal WeekEndingDate As Date, ByVal WeekEndingDateToDisplay As String) As CalendarRow
            Dim rowCalendarRow As CalendarRow = CType(Me.NewRow,CalendarRow)
            rowCalendarRow.ItemArray = New Object() {WeekEndingDate, WeekEndingDateToDisplay}
            Me.Rows.Add(rowCalendarRow)
            Return rowCalendarRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CalendarDataTable = CType(MyBase.Clone,CalendarDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CalendarDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnWeekEndingDate = Me.Columns("WeekEndingDate")
            Me.columnWeekEndingDateToDisplay = Me.Columns("WeekEndingDateToDisplay")
        End Sub
        
        Private Sub InitClass()
            Me.columnWeekEndingDate = New DataColumn("WeekEndingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekEndingDate)
            Me.columnWeekEndingDateToDisplay = New DataColumn("WeekEndingDateToDisplay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeekEndingDateToDisplay)
        End Sub
        
        Public Function NewCalendarRow() As CalendarRow
            Return CType(Me.NewRow,CalendarRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CalendarRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CalendarRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CalendarRowChangedEvent) Is Nothing) Then
                RaiseEvent CalendarRowChanged(Me, New CalendarRowChangeEvent(CType(e.Row,CalendarRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CalendarRowChangingEvent) Is Nothing) Then
                RaiseEvent CalendarRowChanging(Me, New CalendarRowChangeEvent(CType(e.Row,CalendarRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CalendarRowDeletedEvent) Is Nothing) Then
                RaiseEvent CalendarRowDeleted(Me, New CalendarRowChangeEvent(CType(e.Row,CalendarRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CalendarRowDeletingEvent) Is Nothing) Then
                RaiseEvent CalendarRowDeleting(Me, New CalendarRowChangeEvent(CType(e.Row,CalendarRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCalendarRow(ByVal row As CalendarRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CalendarRow
        Inherits DataRow
        
        Private tableCalendar As CalendarDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCalendar = CType(Me.Table,CalendarDataTable)
        End Sub
        
        Public Property WeekEndingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCalendar.WeekEndingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCalendar.WeekEndingDateColumn) = value
            End Set
        End Property
        
        Public Property WeekEndingDateToDisplay As String
            Get
                Try 
                    Return CType(Me(Me.tableCalendar.WeekEndingDateToDisplayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCalendar.WeekEndingDateToDisplayColumn) = value
            End Set
        End Property
        
        Public Function IsWeekEndingDateNull() As Boolean
            Return Me.IsNull(Me.tableCalendar.WeekEndingDateColumn)
        End Function
        
        Public Sub SetWeekEndingDateNull()
            Me(Me.tableCalendar.WeekEndingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeekEndingDateToDisplayNull() As Boolean
            Return Me.IsNull(Me.tableCalendar.WeekEndingDateToDisplayColumn)
        End Function
        
        Public Sub SetWeekEndingDateToDisplayNull()
            Me(Me.tableCalendar.WeekEndingDateToDisplayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CalendarRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CalendarRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CalendarRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CalendarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
