'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("WorkPackage"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class WorkPackage
    Inherits System.Data.DataSet
    
    Private tableWorkPackageList As WorkPackageListDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("WorkPackageList")) Is Nothing) Then
                MyBase.Tables.Add(New WorkPackageListDataTable(ds.Tables("WorkPackageList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WorkPackageList() As WorkPackageListDataTable
        Get
            Return Me.tableWorkPackageList
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As WorkPackage = CType(MyBase.Clone,WorkPackage)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("WorkPackageList")) Is Nothing) Then
                MyBase.Tables.Add(New WorkPackageListDataTable(ds.Tables("WorkPackageList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableWorkPackageList = CType(MyBase.Tables("WorkPackageList"),WorkPackageListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWorkPackageList) Is Nothing) Then
                Me.tableWorkPackageList.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "WorkPackage"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/WorkPackage.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableWorkPackageList = New WorkPackageListDataTable
        MyBase.Tables.Add(Me.tableWorkPackageList)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeWorkPackageList() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As WorkPackage = New WorkPackage
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub WorkPackageListRowChangeEventHandler(ByVal sender As Object, ByVal e As WorkPackageListRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WorkPackageListDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnWorkPackageID As System.Data.DataColumn
        
        Private columnPhaseID As System.Data.DataColumn
        
        Private columnPhaseDescription As System.Data.DataColumn
        
        Private columnLocationID As System.Data.DataColumn
        
        Private columnLocationDescription As System.Data.DataColumn
        
        Private columnLocationSortOrder As System.Data.DataColumn
        
        Private columnAreaID As System.Data.DataColumn
        
        Private columnAreaDescription As System.Data.DataColumn
        
        Private columnAreaSortOrder As System.Data.DataColumn
        
        Private columnUnitID As System.Data.DataColumn
        
        Private columnUnitDescription As System.Data.DataColumn
        
        Private columnUnitSortOrder As System.Data.DataColumn
        
        Private columnGroupID As System.Data.DataColumn
        
        Private columnGroupDescription As System.Data.DataColumn
        
        Private columnGroupSortOrder As System.Data.DataColumn
        
        Private columnDisciplineID As System.Data.DataColumn
        
        Private columnDisciplineNo As System.Data.DataColumn
        
        Private columnDisciplineDescription As System.Data.DataColumn
        
        Private columnDisciplineLevel3SortOrder As System.Data.DataColumn
        
        Private columnSectionID As System.Data.DataColumn
        
        Private columnSectionNo As System.Data.DataColumn
        
        Private columnSectionDescription As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WorkPackageList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkPackageIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnWorkPackageID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhaseIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhaseID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhaseDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhaseDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnLocationID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnLocationDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocationSortOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnLocationSortOrder
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnAreaID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnAreaDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaSortOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnAreaSortOrder
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitSortOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnitSortOrder
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupSortOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupSortOrder
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisciplineIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnDisciplineID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisciplineNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDisciplineNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisciplineDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDisciplineDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisciplineLevel3SortOrderColumn() As System.Data.DataColumn
            Get
                Return Me.columnDisciplineLevel3SortOrder
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSectionID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSectionNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectionDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnSectionDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WorkPackageListRow
            Get
                Return CType(Me.Rows(index),WorkPackageListRow)
            End Get
        End Property
        
        Public Event WorkPackageListRowChanging As WorkPackageListRowChangeEventHandler
        
        Public Event WorkPackageListRowChanged As WorkPackageListRowChangeEventHandler
        
        Public Event WorkPackageListRowDeleting As WorkPackageListRowChangeEventHandler
        
        Public Event WorkPackageListRowDeleted As WorkPackageListRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddWorkPackageListRow(ByVal row As WorkPackageListRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddWorkPackageListRow( _
                    ByVal PhaseDescription As String,  _
                    ByVal LocationID As String,  _
                    ByVal LocationDescription As String,  _
                    ByVal LocationSortOrder As Integer,  _
                    ByVal AreaDescription As String,  _
                    ByVal AreaSortOrder As Integer,  _
                    ByVal UnitID As String,  _
                    ByVal UnitDescription As String,  _
                    ByVal UnitSortOrder As Integer,  _
                    ByVal GroupDescription As String,  _
                    ByVal GroupSortOrder As Integer,  _
                    ByVal DisciplineNo As String,  _
                    ByVal DisciplineDescription As String,  _
                    ByVal DisciplineLevel3SortOrder As Integer,  _
                    ByVal SectionNo As String,  _
                    ByVal SectionDescription As String) As WorkPackageListRow
            Dim rowWorkPackageListRow As WorkPackageListRow = CType(Me.NewRow,WorkPackageListRow)
            rowWorkPackageListRow.ItemArray = New Object() {Nothing, Nothing, PhaseDescription, LocationID, LocationDescription, LocationSortOrder, Nothing, AreaDescription, AreaSortOrder, UnitID, UnitDescription, UnitSortOrder, Nothing, GroupDescription, GroupSortOrder, Nothing, DisciplineNo, DisciplineDescription, DisciplineLevel3SortOrder, Nothing, SectionNo, SectionDescription}
            Me.Rows.Add(rowWorkPackageListRow)
            Return rowWorkPackageListRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As WorkPackageListDataTable = CType(MyBase.Clone,WorkPackageListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New WorkPackageListDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWorkPackageID = MyBase.Columns("WorkPackageID")
            Me.columnPhaseID = MyBase.Columns("PhaseID")
            Me.columnPhaseDescription = MyBase.Columns("PhaseDescription")
            Me.columnLocationID = MyBase.Columns("LocationID")
            Me.columnLocationDescription = MyBase.Columns("LocationDescription")
            Me.columnLocationSortOrder = MyBase.Columns("LocationSortOrder")
            Me.columnAreaID = MyBase.Columns("AreaID")
            Me.columnAreaDescription = MyBase.Columns("AreaDescription")
            Me.columnAreaSortOrder = MyBase.Columns("AreaSortOrder")
            Me.columnUnitID = MyBase.Columns("UnitID")
            Me.columnUnitDescription = MyBase.Columns("UnitDescription")
            Me.columnUnitSortOrder = MyBase.Columns("UnitSortOrder")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnGroupDescription = MyBase.Columns("GroupDescription")
            Me.columnGroupSortOrder = MyBase.Columns("GroupSortOrder")
            Me.columnDisciplineID = MyBase.Columns("DisciplineID")
            Me.columnDisciplineNo = MyBase.Columns("DisciplineNo")
            Me.columnDisciplineDescription = MyBase.Columns("DisciplineDescription")
            Me.columnDisciplineLevel3SortOrder = MyBase.Columns("DisciplineLevel3SortOrder")
            Me.columnSectionID = MyBase.Columns("SectionID")
            Me.columnSectionNo = MyBase.Columns("SectionNo")
            Me.columnSectionDescription = MyBase.Columns("SectionDescription")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWorkPackageID = New System.Data.DataColumn("WorkPackageID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkPackageID)
            Me.columnPhaseID = New System.Data.DataColumn("PhaseID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhaseID)
            Me.columnPhaseDescription = New System.Data.DataColumn("PhaseDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhaseDescription)
            Me.columnLocationID = New System.Data.DataColumn("LocationID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationID)
            Me.columnLocationDescription = New System.Data.DataColumn("LocationDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationDescription)
            Me.columnLocationSortOrder = New System.Data.DataColumn("LocationSortOrder", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocationSortOrder)
            Me.columnAreaID = New System.Data.DataColumn("AreaID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaID)
            Me.columnAreaDescription = New System.Data.DataColumn("AreaDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaDescription)
            Me.columnAreaSortOrder = New System.Data.DataColumn("AreaSortOrder", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaSortOrder)
            Me.columnUnitID = New System.Data.DataColumn("UnitID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitID)
            Me.columnUnitDescription = New System.Data.DataColumn("UnitDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitDescription)
            Me.columnUnitSortOrder = New System.Data.DataColumn("UnitSortOrder", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitSortOrder)
            Me.columnGroupID = New System.Data.DataColumn("GroupID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnGroupDescription = New System.Data.DataColumn("GroupDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupDescription)
            Me.columnGroupSortOrder = New System.Data.DataColumn("GroupSortOrder", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupSortOrder)
            Me.columnDisciplineID = New System.Data.DataColumn("DisciplineID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisciplineID)
            Me.columnDisciplineNo = New System.Data.DataColumn("DisciplineNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisciplineNo)
            Me.columnDisciplineDescription = New System.Data.DataColumn("DisciplineDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisciplineDescription)
            Me.columnDisciplineLevel3SortOrder = New System.Data.DataColumn("DisciplineLevel3SortOrder", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisciplineLevel3SortOrder)
            Me.columnSectionID = New System.Data.DataColumn("SectionID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSectionID)
            Me.columnSectionNo = New System.Data.DataColumn("SectionNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSectionNo)
            Me.columnSectionDescription = New System.Data.DataColumn("SectionDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSectionDescription)
            Me.columnWorkPackageID.AutoIncrement = true
            Me.columnWorkPackageID.AllowDBNull = false
            Me.columnWorkPackageID.ReadOnly = true
            Me.columnPhaseID.AutoIncrement = true
            Me.columnPhaseID.AllowDBNull = false
            Me.columnPhaseID.ReadOnly = true
            Me.columnLocationID.AllowDBNull = false
            Me.columnLocationDescription.AllowDBNull = false
            Me.columnAreaID.AutoIncrement = true
            Me.columnAreaID.AllowDBNull = false
            Me.columnAreaID.ReadOnly = true
            Me.columnAreaDescription.AllowDBNull = false
            Me.columnUnitID.AllowDBNull = false
            Me.columnGroupID.AutoIncrement = true
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.ReadOnly = true
            Me.columnDisciplineID.AutoIncrement = true
            Me.columnDisciplineID.AllowDBNull = false
            Me.columnDisciplineID.ReadOnly = true
            Me.columnDisciplineNo.AllowDBNull = false
            Me.columnSectionID.AutoIncrement = true
            Me.columnSectionID.AllowDBNull = false
            Me.columnSectionID.ReadOnly = true
            Me.columnSectionNo.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewWorkPackageListRow() As WorkPackageListRow
            Return CType(Me.NewRow,WorkPackageListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New WorkPackageListRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(WorkPackageListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WorkPackageListRowChangedEvent) Is Nothing) Then
                RaiseEvent WorkPackageListRowChanged(Me, New WorkPackageListRowChangeEvent(CType(e.Row,WorkPackageListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WorkPackageListRowChangingEvent) Is Nothing) Then
                RaiseEvent WorkPackageListRowChanging(Me, New WorkPackageListRowChangeEvent(CType(e.Row,WorkPackageListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WorkPackageListRowDeletedEvent) Is Nothing) Then
                RaiseEvent WorkPackageListRowDeleted(Me, New WorkPackageListRowChangeEvent(CType(e.Row,WorkPackageListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WorkPackageListRowDeletingEvent) Is Nothing) Then
                RaiseEvent WorkPackageListRowDeleting(Me, New WorkPackageListRowChangeEvent(CType(e.Row,WorkPackageListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveWorkPackageListRow(ByVal row As WorkPackageListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As WorkPackage = New WorkPackage
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WorkPackageListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class WorkPackageListRow
        Inherits System.Data.DataRow
        
        Private tableWorkPackageList As WorkPackageListDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWorkPackageList = CType(Me.Table,WorkPackageListDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkPackageID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.WorkPackageIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.WorkPackageIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhaseID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.PhaseIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.PhaseIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhaseDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.PhaseDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhaseDescription' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.PhaseDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationID() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.LocationIDColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.LocationIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationDescription() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.LocationDescriptionColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.LocationDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocationSortOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.LocationSortOrderColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LocationSortOrder' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.LocationSortOrderColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.AreaIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.AreaIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaDescription() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.AreaDescriptionColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.AreaDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaSortOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.AreaSortOrderColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AreaSortOrder' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.AreaSortOrderColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitID() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.UnitIDColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.UnitIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.UnitDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UnitDescription' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.UnitDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitSortOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.UnitSortOrderColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UnitSortOrder' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.UnitSortOrderColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.GroupIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.GroupIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.GroupDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GroupDescription' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.GroupDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupSortOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.GroupSortOrderColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GroupSortOrder' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.GroupSortOrderColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisciplineID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.DisciplineIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.DisciplineIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisciplineNo() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.DisciplineNoColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.DisciplineNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisciplineDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.DisciplineDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DisciplineDescription' in table 'WorkPackageList' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.DisciplineDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisciplineLevel3SortOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.DisciplineLevel3SortOrderColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DisciplineLevel3SortOrder' in table 'WorkPackageList' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.DisciplineLevel3SortOrderColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SectionID() As Integer
            Get
                Return CType(Me(Me.tableWorkPackageList.SectionIDColumn),Integer)
            End Get
            Set
                Me(Me.tableWorkPackageList.SectionIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SectionNo() As String
            Get
                Return CType(Me(Me.tableWorkPackageList.SectionNoColumn),String)
            End Get
            Set
                Me(Me.tableWorkPackageList.SectionNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SectionDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableWorkPackageList.SectionDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SectionDescription' in table 'WorkPackageList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWorkPackageList.SectionDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhaseDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.PhaseDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhaseDescriptionNull()
            Me(Me.tableWorkPackageList.PhaseDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocationSortOrderNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.LocationSortOrderColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocationSortOrderNull()
            Me(Me.tableWorkPackageList.LocationSortOrderColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAreaSortOrderNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.AreaSortOrderColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAreaSortOrderNull()
            Me(Me.tableWorkPackageList.AreaSortOrderColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.UnitDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitDescriptionNull()
            Me(Me.tableWorkPackageList.UnitDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitSortOrderNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.UnitSortOrderColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitSortOrderNull()
            Me(Me.tableWorkPackageList.UnitSortOrderColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.GroupDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupDescriptionNull()
            Me(Me.tableWorkPackageList.GroupDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupSortOrderNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.GroupSortOrderColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupSortOrderNull()
            Me(Me.tableWorkPackageList.GroupSortOrderColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisciplineDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.DisciplineDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisciplineDescriptionNull()
            Me(Me.tableWorkPackageList.DisciplineDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisciplineLevel3SortOrderNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.DisciplineLevel3SortOrderColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisciplineLevel3SortOrderNull()
            Me(Me.tableWorkPackageList.DisciplineLevel3SortOrderColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectionDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableWorkPackageList.SectionDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectionDescriptionNull()
            Me(Me.tableWorkPackageList.SectionDescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class WorkPackageListRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As WorkPackageListRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As WorkPackageListRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As WorkPackageListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
